name: src

on:
  push:
    paths:
      - 'src/**'
      - '**.yml'

env:
  CMSIS: CMSIS_5

jobs:
  dapboot:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: make-action
        uses: Qful/make-action@master
        with:
          release: '10-2020-q4'

      - name: build dapboot
        working-directory: src/dapboot
        run: |
          chmod +x libopencm3/scripts/irq2nvic_h
          chmod +x libopencm3/scripts/lpcvtcksum
          chmod +x libopencm3/scripts/gendoxylist
          chmod +x libopencm3/scripts/genlinktest.sh
          make -f release.Makefile -k all

      - uses: actions/upload-artifact@v2
        with:
          name: dapboot
          path: src/dapboot/build

  sboot:
    strategy:
      fail-fast: false
      matrix:
        # example:
        #   - "native-blink"
        #   - "spl-blink"
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: make-action
        uses: Qful/make-action@master
        with:
          release: 10-2020-q4

      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: build
        if: matrix.os == 'ubuntu-latest'
        working-directory: src/sboot
        run: |
          make prerequisites
          make stm32f103x8
          make crypter
          make testsuite

      - name: build
        if: matrix.os == 'windows-latest'
        working-directory: src/sboot
        run: |
          make prerequisites
          make stm32f103x8 SHELL=cmd
          make crypter SHELL=cmd SWTOOLS=
          make testsuite SHELL=cmd SWTOOLS=

      - name: build
        if: matrix.os == 'macos-latest'
        working-directory: src/sboot
        run: |
          brew install make
          gmake prerequisites
          gmake stm32f103x8
          gmake crypter
          gmake testsuite

      - name: vector test
        working-directory: src/sboot
        run: |
          build/cipher_test

      - uses: actions/upload-artifact@v2
        with:
          name: sboot_${{ matrix.os }}
          path: src/sboot/build

  build:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest,  macos-latest] # windows-latest,
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      # - name: Install gcc
      #   run: |
      #     wget https://developer.arm.com/-/media/Files/downloads/gnu-rm/10-2020q4/gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
      #     tar -xf gcc-arm-none-eabi-10-2020-q4-major-x86_64-linux.tar.bz2
      #     echo `pwd`/gcc-arm-none-eabi-10-2020-q4-major/bin >> $GITHUB_PATH

      - name: make-action
        uses: Qful/make-action@master
        with:
          release: 10-2020-q4
      - name: build template
        working-directory: src/template
        if: matrix.os == 'ubuntu-latest'
        run: |
          make -C blink

      - name: build template
        working-directory: src/template
        if: matrix.os == 'windows-latest'
        run: |
          make -C blink SHELL=cmd

      - name: build template
        working-directory: src/template
        if: matrix.os == 'macos-latest'
        run: |
          brew install make
          make -C blink

      - name: upload template
        uses: actions/upload-artifact@v2
        with:
          name: template_${{ matrix.os }}
          path: src/template/blink/bin

  platformio:
    strategy:
      fail-fast: false
      matrix:
        example:
          - "cmsis-blink"
          - "libopencm3-blink"
          - "arduino-blink"
          - "arduino-external-libs"
          - "arduino-internal-libs"
          - "mbed-rtos-blink-baremetal"
          - "stm32cube-hal-blink"
          - "stm32cube-hal-eeprom-emulation"
          - "zephyr-blink"
        os: [ubuntu-16.04, windows-latest, macos-latest]

    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: Set up Python
        uses: actions/setup-python@v1
        with:
          python-version: 3.7

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -U https://github.com/platformio/platformio/archive/develop.zip

      - name: platformio build
        working-directory: src/platformio
        run: |
          platformio run -d ${{ matrix.example }}
          # pio ci --board=nucleo_f207zg -d ${{ matrix.example }}


      - uses: actions/upload-artifact@v2
        with:
          name: platformio_${{ matrix.example }}_${{ matrix.os }}
          path: src/platformio/${{ matrix.example }}/

  rust:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: "recursive"
          fetch-depth: 1

      - name: install  
        run: |
          sudo apt update -y
          sudo apt install -y rust gcc-arm-none-eabi libnewlib-arm-none-eabi clang


      - name: build 
        working-directory: src/template/rust-usbd
        run: |
          rustup target add thumbv6m-none-eabi
          rustup target add thumbv7m-none-eabi
          rustup target add thumbv7em-none-eabihf
          cargo build --release

      - uses: actions/upload-artifact@v2
        with:
          name: rust-usbd
          path: src/template/rust-usbd/target